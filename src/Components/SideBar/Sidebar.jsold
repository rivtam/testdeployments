import React, { useState } from 'react';
import styled from 'styled-components';
import { Link } from 'react-router-dom';
import * as FaIcons from 'react-icons/fa';
import * as AiIcons from 'react-icons/ai';
import SidebarData from './SidebarData';
import SubMenu from './SubMenu';
import { IconContext } from 'react-icons/lib';
import { Outlet } from 'react-router-dom';
import { useKeycloak } from '@react-keycloak/web';

const Nav = styled.div`
  background: #15171c;
  height: 80px;
  display: flex;
  justify-content: flex-start;
  align-items: center;
`;

const NavIcon = styled(Link)`
  margin-left: 2rem;
  font-size: 2rem;
  height: 80px;
  display: flex;
  justify-content: flex-start;
  align-items: center;
`;

const SidebarNav = styled.nav`
  background: #15171c;
  width: 250px;
  height: 100vh;
  display: flex;
  justify-content: center;
  position: fixed;
  top: 0;
  left: ${({ sidebar }) => (sidebar ? '0' : '-100%')};
  transition: 350ms;
  z-index: 10;
`;

const SidebarWrap = styled.div`
  width: 100%;
`;

const Sidebar = () => {
  const [sidebar, setSidebar] = useState(false);

  const showSidebar = () => setSidebar(!sidebar);
  const { keycloak, initialized } = useKeycloak();

  return (
    <>
      <IconContext.Provider value={{ color: '#fff' }}>
        <Nav>
          <NavIcon to="#">
            <FaIcons.FaBars onClick={showSidebar} />
          </NavIcon>
          <NavIcon to="#">
            <FaIcons.FaSignInAlt onClick={showSidebar} />
          </NavIcon>
          <NavIcon to="#">
            <FaIcons.FaSignOutAlt onClick={showSidebar} />
          </NavIcon>
          <div className="hidden xl:flex items-center space-x-5">
            <div className="hover:text-gray-200">
              {!keycloak.authenticated && (
                <button type="button" className="text-blue-800" onClick={() => keycloak.login()}>
                  Login
                </button>
              )}

              {!!keycloak.authenticated && (
                <button type="button" className="text-blue-800" onClick={() => keycloak.logout()}>
                  Logout ({keycloak.tokenParsed.preferred_username})
                </button>
              )}
            </div>
          </div>
        </Nav>
        <SidebarNav sidebar={sidebar}>
          <SidebarWrap>
            <NavIcon to="#">
              <AiIcons.AiOutlineClose onClick={showSidebar} />
            </NavIcon>
            {SidebarData.map((item, index) => {
              return <SubMenu item={item} key={index} />;
            })}
          </SidebarWrap>
        </SidebarNav>
      </IconContext.Provider>
      <div className="hidden xl:flex items-center space-x-5">
        <div className="hover:text-gray-200">
          {!keycloak.authenticated && (
            <button type="button" className="text-blue-800" onClick={() => keycloak.login()}>
              Login
            </button>
          )}

          {!!keycloak.authenticated && (
            <button type="button" className="text-blue-800" onClick={() => keycloak.logout()}>
              Logout ({keycloak.tokenParsed.preferred_username})
            </button>
          )}
        </div>
      </div>
      <div id="detail">
        <Outlet />
      </div>
    </>
  );
};

export default Sidebar;
